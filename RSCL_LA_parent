definition(
    name: "Lights Automations V1",
    namespace: "RSCL_LA",
    author: "Roberto Lee",
    description: "A parent app that creates and manages child apps.",
    category: "Convenience",
    iconUrl: "",
    iconX2Url: "",
    singleInstance: true
)

preferences {
    page(name: "mainPageParent", title: "RSCL Parent App Configuration", install: true, uninstall: true) 
    {
        section("Mode Selection") {
            input(name: "selectedModes", type: "mode", title: "Select Modes to Configure", multiple: true, required: true, width: 4)
            input "txtEnable", "bool", title: "Descriptive logging?", defaultValue: true, required: true, width: 4
            input "logEnable", "bool", title: "Extensive (debug) logging?", required: true, width: 4
            input "sendMessageLog", "capability.notification", title: "Send log", multiple: true, required: false, width: 6
            input "sendMessageImportant", "capability.notification", title: "Send important phone notifications", multiple: true, required: false, width: 6                
        }       
        section("Wacther - settings") {
            input "groupChanges", "bool", title: "Group changes with a slight delay? Otherwise notify on every change", required: true, width: 4
        }         
        section("Wacther - Select Devices to Monitor") {
            input "lights", "capability.switch", title: "Which lights?", multiple: true, required: false, width: 4
            input "doors", "capability.contactSensor", title: "Which doors?", multiple: true, required: false, width: 4
            input "motionsensors", "capability.motionSensor", title: "Which motion sensors?", multiple: true, required: false, width: 4
        }
        section("Wacther - Manual Triggers") {
            input "manualLightsOffTrigger", "capability.switch", title: "All lights off trigger", multiple: false, required: true, width: 4
            input "manualCheckTrigger", "capability.switch", title: "Manual Motion Check Trigger", required: false, width: 4
            input "runInMinutes", "number", title: "Check every n minutes", required: true, defaultValue: 15, width: 4
        }     
        section("Actions:") {
            input name: "Save", type: "button", title: "Save", submitOnChange: true
        }            
        /*
        section("Mode Selection") {
            input "includedModes", "mode", title: "Applicable modes", multiple: true, required: false, width: 6
        }        
        */
        section("ROOMS:") 
        {
            app(name: "myChildApps", appName: "Lights Automations V1 Child", namespace: "RSCL_LA", title: "Add room", multiple: true)
        }
    }
}

def installed() {
    ldebug("Parent App Installed")
    initialize()
}

def updated() {
    ldebug("Parent App Updated")
    initialize()
}

def initialize() 
{
    setAppname("watcher")
    setCallMethod("initialize")

    state.lightsStates = []
    state.selectedModes = settings.selectedModes ?: []

    unschedule()
	unsubscribe()
    
    subscribe(location, "mode", modeChangeHandler)

    if (lights) {
        subscribe(lights, "switch", lightsChangeHandler)
    }
    if (doors) {
        subscribe(doors, "contact", doorsChangeHandler)
    }
    if (motionsensors) {
       subscribe(motionsensors, "motion", motionHandler)
    }
    if (manualCheckTrigger) 
    {
        subscribe(manualCheckTrigger, "switch.on", manualCheckHandler)
    }
    if(manualLightsOffTrigger)
    {
        linfo("subscribe ${manualLightsOffTrigger}")
        subscribe(manualLightsOffTrigger, "switch", manualLightsOffTriggerHandler)
    }

    //runIn(1, statusAndAlert, [data: [source: 'initialize']])

    // Schedule the check
    runIn(3, schedulerCheck)    
    
    sendLog("Watcher + Parent App Initialized")
}

// Method to get selected modes (accessible by child apps)
def includedModes(curMode) 
{
    def selectedModes = state.selectedModes ?: []
    def currentMode = curMode ?: location.mode
    if (selectedModes && location.mode) 
    {
        //def currentMode = location.mode
        //def currentMode = getMode()
        selectedModes = selectedModes.findAll { it != currentMode } // Remove current mode if it exists
        selectedModes = [currentMode] + selectedModes // Add current mode to the beginning
    }
    
    return selectedModes ?: []
}




//WATCHER

def modeChangeHandler(evt) 
{
    setCallMethod("modeChangeHandler")
    ldebug("Mode changed to: ${evt.value}")
    sendImportant.deviceNotification("Mode changed to: ${evt.value}\n#watcher")
    if ( ["SleepAll", "SleepSome"].contains(location.mode) )
    {
        def excludePartialNames = ["kids"]
        turnOffLightsExcept(callMethod, excludePartialNames)
    }    
    if ( ["Away"].contains(location.mode) )
    {
        def excludePartialNames = []
        turnOffLightsExcept(callMethod, excludePartialNames)
    }        
}

def manualLightsOffTriggerHandler(evt) 
{
    setCallMethod("manualLightsOffTriggerHandler")

    if(evt.value == "on")
    {
        ldebug("All lights off triggered: ${evt.device}")
        if (["SleepAll", "SleepSome"].contains(location.mode))
        {
            def excludePartialNames = ["kids"]
            turnOffLightsExcept(callMethod, excludePartialNames)
        }    
        else
        {
            def excludePartialNames = []
            turnOffLightsExcept(callMethod, excludePartialNames)        
        }
    }	

}

def appButtonHandler(buttonName) 
{
    setCallMethod("appButtonHandler")
    ldebug("Button pressed: ${buttonName}")
    if (buttonName == "testButton") 
    {
        runIn(1, statusAndAlert, [data: [source: 'test']])
    }
}

def manualCheckHandler(evt) 
{
    setCallMethod("manualCheckHandler")
    if(evt.value == "on")
    {
        runIn(3, statusAndAlert, [data: [source: getCallMethod()]])    
    }
}

def motionHandler(evt) 
{
    //setCallMethod("manualCheckHandler")
    //ldebug("Motion: ${evt.displayName} is ${evt.value}")
    //runIn(10, statusAndAlert, [data: [source: callMethod]])
}

def lightsChangeHandler(evt) 
{
    setCallMethod("lightsChangeHandler")
    
    //ldebug("Light changed: ${evt.displayName} is ${evt.value}")
    if(groupChanges)
    {
        runIn(8, statusAndAlert, [data: [source: callMethod]])    
    }    
    else
    {
        //sendLog("${evt.value == "off" ? "❌" : ""} ${evt.displayName}")
    }
}

def doorsChangeHandler(evt) 
{
    setCallMethod("doorsChangeHandler")
    
    ldebug("Door changed: ${evt.displayName} is ${evt.value}")
    if(groupChanges)
    {
        runIn(1, statusAndAlert, [data: [source: callMethod]])    
    }    
    else
    {
        //sendLog("${evt.value == "off" ? "❌" : ""} ${evt.displayName}")
    }
}

def schedulerCheck(data) 
{
    setCallMethod("schedulerCheck")
    def source = data?.source ?: "unknown"    

    unschedule()
    runIn(3, statusAndAlert, [data: [source: getCallMethod()]])
    runIn(60*runInMinutes, schedulerCheck, [data: [source: getCallMethod()]]) //EVERY 15 MIN
    ldebug("watcher reschedule")
}

def statusAndAlert(data) 
{
    setCallMethod("statusAndAlert")
    
    def source = data?.source ?: "unknown"
    ldebug("statusAndAlert called by: ${source}")
    
    def lightsOn = lights ? lights.findAll { it.currentSwitch == "on" }.sort { a, b -> a.displayName <=> b.displayName } : []
    def openDoors = doors ? doors.findAll { it.currentContact == "open" }.sort { a, b -> a.displayName <=> b.displayName } : []
    def motionActive = motionsensors ? motionsensors.findAll { it.currentMotion == "active" }.sort { a, b -> a.displayName <=> b.displayName } : []

    def message = "💡:${lightsOn.size()}/${lights.size()} 🚪:${openDoors.size()}/${doors.size()} 👋:${motionActive.size()}/${motionsensors.size()}"
    //linfo(message)
//ldebug(lightsOn[0])
/*
    atomicState.each { key, value ->
        ldebug("atomicState[${key}] = ${value}")
    }    
*/
    //ldebug("<b>location.getVariable ${location.getVariable("turnofftime_40")}</b>")
    //def messagedoors = "🚪:${openDoors.size()}"
    //def messagelights = "💡:${lightsOn.size()}"
    //def messagemotions = "👋:${motionNames.size()}"
    def joinChars = "\n"
    if (lightsOn) 
    {
        def lightNames = lightsOn.collect {lightOn -> "${lightOn.displayName} ⏳ ${ getFormatted(state.lightsStates?.find { it.id.toString() == lightOn.id.toString() }?.turnOffTime ) ?: "" } " }.join(joinChars)
        message += "\n${lightNames}"
        //messagelights += "\n${lightNames}"
    }
    if (openDoors) 
    {
        def doorNames = openDoors.collect { it.displayName }.join(joinChars)
        message += "\n${doorNames}"
        //messagedoors += "\n${doorNames}"
    }
    if (motionActive && ["SleepAll", "Away"].contains(location.mode) ) 
    {
        def motionNames = motionActive.collect { it.displayName }.join(joinChars)
        message += "\n${motionNames}"
        //messagemotions += "\n${motionNames}"
    }    

    if (message) 
    {
        //message += " | watching total of ${lights.size()} lights, ${doors.size()} doors, ${motionsensors.size()} motion sensors\n"        
		message += "\n#watcher #${source} #${location.mode}"
        /*
        if (sendPush) 
        {
            log.debug "sendPush"
            sendPush(message)
        }
        if (sendSMS) 
        {
            sendSms(sendSMS, message)
        }
        */

        
        def urgentText = ""

        def doNotifyImportant = false
        
        // Notify if source is manualCheckHandler
        if (source == "manualCheckHandler") {
            doNotifyImportant = true
        }

        // Notify if last check had something on or open, even if nothing is on or open now
        if (state.somethingwasonoropen && (lightsOn.size() == 0 && openDoors.size() == 0)) {
            doNotifyImportant = true
        }

        if(
            ( location.mode == "Away" && (lightsOn.size() > 0 || openDoors.size() > 0 || motionActive.size() > 0 ) )
            ||
            ( ["SleepAll", "Away"].contains(location.mode) && openDoors.size() > 0 )
        )
        {
            doNotifyImportant = true
            urgentText = "\nMODE: ${location.mode.toUpperCase()}, BUT"
        }   

        if (doNotifyImportant) 
        {
            state.somethingwasonoropen = false
            sendImportant("${urgentText}${message}")
        }   
        else
        {
            sendLog("${urgentText}${message}")
        } 

        // Update state for next check
        state.somethingwasonoropen = (lightsOn.size() > 0 || openDoors.size() > 0)                    
       
    }  
    else 
    {
        linfo("No lights on or doors open.")
    }
}

def turnOffLightsExcept(triggerMethod, excludePartialNames = []) 
{
    setCallMethod("turnOffLightsExcept")
    
    def lightsOn = lights ? lights.findAll { 
        it.currentSwitch == "on" && 
        !excludePartialNames.any { partial -> it.displayName.contains(partial) }
    }.sort { a, b -> a.displayName <=> b.displayName } : []
    
    def lightsOnNames = lightsOn.collect { it.displayName }.join(", ")
    def exceptNames = excludePartialNames.size > 0 ? ", skipping ${excludePartialNames.collect { it }.join(", ")}" : ""

    if (lightsOn.size() == 0) 
    {
        sendImportant("No lights to turn off in house${exceptNames}\n#watcher #${triggerMethod}")
        return
    }
    else
    {
        sendImportant("Turning off ${lightsOn.size} of ${lights.size()} lights in house${exceptNames}\n${lightsOnNames}\n#watcher #${triggerMethod}")
        lightsOn.each { light ->
            linfo("Turning off ${light.displayName}\n#${triggerMethod}")
            light.off() 
        } 
    }
    
}

def removeLightState(lightId) 
{
    def s = state.lightsStates ?: []
    def updatedLightStates = s.findAll { it.id != lightId }

    state.lightsStates = updatedLightStates

    llog("Removed light <b>${lightId}</b>","Removed light <b>${lightId}</b> from parent: \n${state.lightsStates}")
}

def updateLightState(lightId, lightName, turnOffTime) 
{
    def s = state.lightsStates ?: []
    def existingLightState = s.find { it.id == lightId }

    if (existingLightState) 
    {
        existingLightState.turnOffTime = turnOffTime

        llog("Updated light <b>${lightId}</b>","Updated light <b>${lightId}</b> states in parent: \n${state.lightsStates}")
    } 
    else 
    {
        def newLightState = [
            id: lightId,
            name: lightName,
            turnOffTime: turnOffTime
        ]
        s << newLightState
        llog("Added light <b>${lightId}</b>", "Added light <b>${lightId}</b> states in parent: \n${state.lightsStates}")
    }
    state.lightsStates = s
}



def setAppname(String str = null)
{
    state.appName = str
}
def getAppname()
{
    return state.appName
}
def setCallMethod(String str = null)
{
    state.callMethod = str
}
def getCallMethod()
{
    return state.callMethod
}
void sendLog(String message)
{
    if (sendMessageLog) 
    {
        sendMessage(sendMessageLog, message)
    }
}
void sendImportant(String message)
{
    if (sendMessageImportant) 
    {
        sendMessage(sendMessageImportant, message)
        sendLog(message) //ALWAYS SEND LOG ALSO
    }
}
void sendMessage(Object devices, String message, appName = "", methodName = "")
{
    if(appName == "")
    {
        appName = getAppname()
    }    
    if(methodName == "")
    {
        methodName = getCallMethod()
    }

    if (devices) 
    {
        devices.each { device ->
            if (device.hasCapability("Notification")) 
            {
                def msg = "[⚙️${appName}] ➜ ${message}"
                device.deviceNotification(msg)
                l(msg, appName, methodName, "debug")
            }
            else 
            {
                lwarn("Device ${device.displayName} does not support notifications")
            }                     
        }            
    }
    else 
    {
        lwarn("No devices provided for sending message: ${message}")
    }    
}
def llog(infomessage, debugmessage)
{
    if(txtEnable)
    {
        linfo(infomessage)
    }
    if(logEnable)
    {
        ldebug(debugmessage)
    }
}
def ldebug(message)
{
	l(message,"","", "debug")
}
def lwarn(message)
{
	l(message,"","", "warn")
}
def lerror(message)
{
	l(message,"","", "error")
}
def linfo(message)
{
	l(message,"","", "info")
}
def l(message, appName = "", methodName = "", logLevel = debug) 
{
    if(appName == "")
    {
        appName = getAppname()
    }    
    if(methodName == "")
    {
        methodName = getCallMethod()
    }
    
    def logMessage = "[⚙️${appName}] ${methodName} ➜ ${message}"

    // Check if a log level is provided or use default
    logLevel = logLevel ?: 'info'  // Default to 'info' if not provided

    // Log based on the provided or default log level
    switch(logLevel.toLowerCase()) 
    {
        case 'debug': 
            if(logEnable)
            {
                log.debug logMessage
            }
            break
        case 'warn':
            log.warn "⚠️" + logMessage
            break
        case 'error':
            log.error logMessage
            break
        default:
            if(txtEnable)
            {
                log.info logMessage
            }
            break
    }
}

def humanizeDatetime(inputTime) 
{
    if(isDate(inputTime))
    {
        try
        {
            def now = new Date()
            def diff = now.time - inputTime.time

            def seconds = diff / 1000
            def minutes = seconds / 60
            def hours = minutes / 60
            def days = hours / 24
            def months = days / 30
            def years = days / 365

            if(diff < 0)
            {
                //return "${diff}"            
                def postfix = "to go"
                if (seconds < 60) return "${-Math.round(seconds)} sec " + postfix
            }
            else
            {
                def postfix = "ago"
                if (seconds < 60) return "${Math.round(seconds)} sec " + postfix
                if (minutes < 60) return "${Math.round(minutes)} min " + postfix
                if (hours < 24) return "${Math.round(hours)} hrs " + postfix
                if (days < 30) return "${Math.round(days)} days " + postfix
                if (months < 12) return "${Math.round(months)} months " + postfix
                return "${Math.round(years)} years " + postfix
            }
        } catch (Exception e) {
            log.error "General Exception caught: ${e.message}"
            return "Err"
        } 

    }
    else
    {
        return "N/A"
    }
}

def retrieveDt(input, format = "yyyy-MM-dd'T'HH:mm:ss.SSS") 
{
    //setCallMethod("retrieveDt")
    if (input) {
        try {
            def parsedDate = Date.parse(format, input)
            //log.debug "Parsed Date from state[$key]: ${parsedDate}"
            return parsedDate
        } catch (Exception e) {
            lerror("Failed to parse stored date from state[$key]: ${input}. Error: ${e.message}")
            return null
        }
    } else {
        lwarn("No date stored in ${input}")
        return null
    }
}

def getFormatted(input, format = "HH:mm:ss.SSS")
{
        def result = retrieveDt(input)
        if(result)
        {
            return "${result.format(format)} (${humanizeDatetime(result)})" 
        }
}

def isDate(input) {
    return input instanceof Date
}